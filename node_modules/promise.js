


var promise=function(loc,key){
  if(loc[key]!==undefined)
    return loc[key];
  var o={subscribe:function(fnc){
      if(!this.done)
        this.f_to_call.push(fnc);
      else
        fnc(this.error,this.result);
      return this;
    },f_to_call:[],f_to_expire:[],done:false,result:false,error:false,time_stamp:0,finish_time:0,
    finish:function(err,data,options){
      if(options==undefined)options={};
      if(options.dt==undefined)options.dt=7000;

      if(this.done)
        throw new Error("finished twice");
      this.done=true;
      this.finish_time=(new Date()).getTime();
      this.result=data;
      this.error=err;
      var exf=this.f_to_call.shift();
      while(exf){
        exf(err,data);
        exf=this.f_to_call.shift();
      };
      setTimeout(function(){
        o.delete_self();
        },options.dt);
    },sub_expire:function(fnc){
      this.f_to_expire.push(fnc);
      return this;
    },
    try_del_fn:function(){
      var ts=this.time_stamp;
      var l=this.loc;
      var k=this.key;
      return function(){
        if(l[k]&&l[k].time_stamp==ts)
          l[k].delete_self();
      };
    }
    ,
    delete_self:function(){
      if(this.f_to_call.length){
        console.trace();
        throw new Error("can't delete yet still stuff in queue");}
      if(!this.done)
        throw new Error("never full filled");
      var ftoex=true;
      while(ftoex){
        ftoex=this.f_to_expire.shift();
        if(ftoex)
          ftoex();
      }
      if(loc[key]==this)
        delete loc[key];
    },
    ensure_terminate:function(fnc){
      if(this.will_terminate||this.done)
        return this;
      else{
        this.will_terminate=true;
        fnc(this);}
      return this;
    }
    ,
    will_terminate:false,loc:loc,key:key,
  };
  loc[key]=o;
  o.time_stamp=(new Date()).getTime();
  var same=o.time_stamp;

  setTimeout(function(){
    if(loc[key])
      if(same===loc[key].time_stamp&&!loc[key].done){
        loc[key].finish(new Error("broken promise "+key),false);
        console.log("Broken Promise");
        console.log(key);
        console.log(JSON.stringify([loc[key].done,loc[key].will_terminate,same]));
      }
  },5*1000);

  return o;
};

module.exports=promise;