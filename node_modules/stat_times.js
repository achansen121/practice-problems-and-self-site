var fs=require('fs');
var promise=require("promise.js");
var process=require("child_process");
var exec=process.execFile;var fork=process.fork;var spawn=process.spawn;delete process;


var stat_promises={};

var sfl_unused={"f.js":true,"simple.js":true,"lib/fix_object_keys.js":true,"lib/sha1.js":true,
  "data_structures.js":true,"algo.js":true,"practice_problems.js":true,"lib/core.js":true,
  "data/words-en.txt":true,"actual_1.js":true,"f.css":true,"canvastry.js":true};
sfl_unused={};
var sc=function(req,res){
  sc.find_all("static/")
  .subscribe(function(err,sfl){

  var sp=sc.stat_files_internal(Object.keys(sfl));
  sp.subscribe(function(err,fmap){
    if(err)
      return res.backup();
    res.writeHead(200,{"Content-Type":"application/javascript","Cache-Control":"public,max-age="+(60*60*24*7)});
    res.write("window.jsfilemtime="+JSON.stringify(fmap.times)+";");
    res.end();
                                                                    });
                                                                    });
};
var ptime=60*1000*60;
//var plongtime=ptime*60;

sc.find_all=function(folder){
  return promise(stat_promises,"readall]"+folder.length+"]"+folder)
  .ensure_terminate(function(p){
    console.log("recursive stating "+folder);
    var fsub={};
    fs.readdir(folder,function(err,files){
      if(err)
        throw err;
      var fcount=0;
      for (var i = 0; i < files.length; i++) {
        var pf=promise(stat_promises,"stat_dirall]"+folder.length+folder+"]"+files[i]);
        pf.ensure_terminate(function(pinner){
          fs.stat(folder+files[i],function(err,data){
            pinner.finish(err,data,{dt:ptime});
          });
        })
        .subscribe((function(fname){
          return function(err,data){
          if(data.isDirectory()){
            var rec=sc.find_all(folder+fname+"/");
            rec.subscribe(function(err,allfin){
              if(allfin&&typeof allfin=="object"){
                var allfinkeys=Object.keys(allfin);
                for (var i = 0; i < allfinkeys.length; i++) {
                  fsub[allfinkeys[i]]=true;
                };
              }
              fcount+=1;
              if(fcount==files.length)
                p.finish(false,fsub,{dt:ptime});
            })
            .sub_expire(pf.try_del_fn());
          }
          else{
            fsub[folder+fname]=true;
            fcount+=1;
            if(fcount==files.length)
              p.finish(false,fsub,{dt:ptime});
          }
        }})(files[i]))
        .sub_expire(p.try_del_fn());
      };
    });
  });
}




sc.stat_files=function(file_list){
  var fstr=JSON.stringify(file_list);
  return promise(stat_promises,"stat_files]"+fstr.length+"]"+fstr)
  .ensure_terminate(function(pout){
    sc.get_version()
    .subscribe(function(err,version){
      if(err)
        return pout.finish(err,null);
      var out={};
      var ap=sc.stat_files_internal(file_list);
      ap.subscribe(function(err,data){
        if(err)
          return pout.finish(err,null);
        data.stat_version_file="/stat_times.js?v="+version;
        return pout.finish(null,data,{dt:ptime});
      })
      .sub_expire(pout.try_del_fn());
    })
    .sub_expire(pout.try_del_fn())
  });
};

sc.stat_files_internal=function(file_list){

  var fstr=JSON.stringify(file_list);

  var stat_all=promise(stat_promises,"stat_files_internal]"+fstr.length+"]"+fstr);
  var gathered={times:{},num:0,max:file_list.length};
  gathered.newest=0;
  stat_all.ensure_terminate(function(){
    for (var i = 0; i < file_list.length; i++) {
      var full_name=file_list[i];
      var stat_indiv=promise(stat_promises,"stat_single "+full_name);
      stat_indiv.ensure_terminate(function(){
        var associate_name=(function(p,nm){return function(err,stats){
          if(err)
            return p.finish(err,{fname:nm});
          console.log("stat "+nm);
          stats.fname=nm;
          p.finish(err,stats,{dt:ptime});
        };})(stat_indiv,full_name);
        fs.stat(full_name,associate_name);
      });
      stat_indiv.subscribe(function(err,data){
        if(err)
          return stat_all.finish(new Error("file read err"+data.fname),{});
        var ct=data.mtime.getTime();
        if("newest" in gathered && ct>gathered.newest)
          gathered.newest=ct;
        gathered.times["/"+data.fname]=ct;
        gathered.num++;
        if(gathered.num>=gathered.max)
          stat_all.finish(false,gathered,{dt:ptime});
      })
      .sub_expire(stat_all.try_del_fn());
    };
  });
  return stat_all;
};

sc.get_version=function(){

  return promise(stat_promises,"stat_version")
  .ensure_terminate(function(p){

  sc.find_all("static/")
  .subscribe(function(err,sfl){
    sc.stat_files_internal(Object.keys(sfl))
    .subscribe(function(err,data){
      p.finish(err,data.newest,{dt:ptime});
    })
    .sub_expire(p.try_del_fn());
  })
  .sub_expire(p.try_del_fn());
  });
};

var fin_exec=function(pr){
  console.log("making fin exec");
  return function(err,so,se){
    console.log("running fin exec");
    pr.finish(err,{so:so,se:se});
  };
};

var f_waiters={};

sc.f_wait=function(fname,fnc){
  if(!f_waiters[fname])
    f_waiters[fname]=[];
  f_waiters[fname].push(fnc);
  setTimeout(function(){
    finish_wait(true,fname);
  },60*1000);
};

var finish_wait=function(cancel,fname){
  if(!f_waiters[fname])
    return false;
  var nf=true;
  while(nf){
    nf=f_waiters[fname].shift();
    if(nf)
      nf(cancel);
  };
  delete f_waiters[fname];
};



var iwatch=(function(){
  var iw_promises={};


  var elist=",modify,create,delete,moved_to,moved_from".split(",").join(",-e,").split(",");
  var args=["-r","-m"].concat(elist).concat(["static"]).concat(["--format","%e] %w%f"]);

  var iw=spawn("inotifywait",args);

  iw.stdio[1].on("data",function(data){
    var str=data.toString().trim();
    var match=/^(\w+?)\] (.*)$/ig.exec(str)
    if(match){
      var full_name=match[2];
      finish_wait(false,full_name);
      if(stat_promises["stat_single "+full_name]&&stat_promises["stat_single "+full_name].done){
        stat_promises["stat_single "+full_name].delete_self();
        console.log("deleted time for "+full_name);
      }
    }
  });

})();

module.exports=sc;